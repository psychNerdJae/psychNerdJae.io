{
  "hash": "141940c50a31231053dc61f80c1ee3f0",
  "result": {
    "markdown": "---\ntitle: \"Topological World Map\"\nauthor: \"Jae-Young Son\"\ndate: \"2023-06-21\"\ncategories: [art, procrastination]\nimage: \"image.jpg\"\ncode-fold: true\n---\n\n\n## Topology\n\nI was looking at the Wikipedia article for [topology](https://en.wikipedia.org/wiki/Topology) and noticed that people seemed to get this term confused with [topography](https://en.wikipedia.org/wiki/Topography). As someone who works with networks a lot, I found it a bit funny to think about what a topological map of the world might look like, and how impractical that format of information would be for most practical applications.\n\nSo instead of doing any of the thousand things I have on my docket, I of course set out to create such a map (well, technically, graph).\n\nThe CIA maintains an online factbook about the world, which includes a list of countries and their land borders/boundaries. We can use `rvest` to scrape the relevant data from that page.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(tidygraph)\nlibrary(ggraph)\n\nworld_borders <- read_html(\n  \"https://www.cia.gov/the-world-factbook/field/land-boundaries/\"\n)\n```\n:::\n\n\nFrom there, it's a straightforward (if somewhat tedious) task to extract the relevant pieces of information into a tidy dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- world_borders %>%\n  html_element(\".col-lg-9\") %>%\n  html_element(\"ul\") %>%\n  html_elements(\"li\") %>%\n  html_text2() %>%\n  enframe(name = NULL, value = \"source_text\") %>%\n  mutate(\n    # What country are we starting from?\n    from = str_remove(source_text, \"\\n\\n[[:print:]\\n]*\"),\n    # From that country, where could we go to?\n    to = str_extract(source_text, \"\\n\\n[[:print:]\\n]*\"),\n    to = str_extract(to, \"border countries [[:digit:]()]*:\\\\s.*\"),\n    to = str_remove(to, \"^border countries [[:digit:]()]*:\\\\s\"),\n    # What's the total border length of our starting/\"from\" country?\n    total = str_extract(source_text, \"total: [[:digit:],\\\\.]* km\"),\n    total = str_remove_all(total, \"total:|km\")\n  ) %>%\n  # Each bordering country gets its own row\n  separate_rows(to, sep = \"[;,]\\\\s\") %>%\n  mutate(\n    # Edge weight is extent of land border\n    edge = str_extract(to, \"[[:digit:],\\\\.]* km\"),\n    edge = str_remove(edge, \"\\\\skm\"),\n    # Do some cleanup\n    from = if_else(from == \"Turkey (Turkiye)\", \"Turkey\", from),\n    to = str_remove(to, \"\\\\s[[:digit:],\\\\.]* km\"),\n    to = str_remove(to, \"\\\\s\\\\(.*\"),\n    to = case_when(\n      to == \"UAE\" ~ \"United Arab Emirates\",\n      to == \"UK\" ~ \"United Kingdom\",\n      to == \"US\" ~ \"United States\",\n      TRUE ~ to\n    ),\n    from_pt1 = if_else(\n      str_count(from, \",\") == 1,\n      str_extract(from, \"[[:alpha:]]*,\"),\n      NA_character_\n    ),\n    from_pt2 = if_else(\n      str_count(from, \",\") == 1,\n      str_extract(from, \", [[:alpha:]\\\\s]*\"),\n      NA_character_\n    ),\n    across(c(from_pt1, from_pt2), ~str_remove(.x, \"(\\\\s,)|,\")),\n    from = if_else(!is.na(from_pt1), str_c(from_pt2, \" \", from_pt1), from)\n  ) %>%\n  # Fix the column types\n  type_convert(\n    col_types = cols(from = \"c\", to = \"c\", total = \"n\", edge = \"n\")\n  ) %>%\n  # Convert the edge weights from absolute to relative scale\n  mutate(edge_standardized = edge / total) %>%\n  select(-c(source_text, from_pt1, from_pt2)) %>%\n  filter(from != \"European Union\", from != \"World\")\n```\n:::\n\n\nWe can then use `tidygraph` to convert this information into a graph representation...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- tbl_graph(\n  nodes = countries %>%\n    drop_na() %>%\n    pivot_longer(c(from, to)) %>%\n    select(name = value) %>%\n    distinct(),\n  edges = countries %>%\n    drop_na() %>%\n    mutate(\n      from_sorted = if_else(from < to, from, to),\n      to_sorted = if_else(from < to, to, from),\n    ) %>%\n    arrange(from_sorted, to_sorted) %>%\n    group_by(from = from_sorted, to = to_sorted) %>%\n    summarise(edge = mean(edge_standardized), .groups = \"drop\"),\n  directed = FALSE\n)\n```\n:::\n\n\nAnd from there, it's pretty simple to plot it out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(sum(utf8ToInt(\"my angus please stay\")))\n\ng %>%\n  mutate(name = str_wrap(name, width = 20)) %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_fan(\n    aes(alpha = edge),\n    color = \"white\",\n    show.legend = FALSE\n  ) +\n  geom_node_label(aes(label = name), size = 1.5, fill = \"#80cdc1\") +\n  ggtitle(\n    \"Topological World Map\",\n    subtitle = \"(oh, were you looking for a *topographical* map??)\"\n  ) +\n  list(\n    theme_bw(),\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 13),\n      plot.subtitle = element_text(hjust = 0.5, size = 11),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      panel.spacing = unit(0.75, \"lines\"),\n      legend.box.spacing = unit(0.5, \"lines\"),\n      legend.margin = margin(c(0, 0, 0, 0), unit = \"lines\"),\n      panel.background = element_rect(fill = \"#2c7bb6\"),\n      panel.border = element_blank(),\n      axis.title = element_blank(),\n      axis.text = element_blank(),\n      axis.ticks = element_blank()\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-graph-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}